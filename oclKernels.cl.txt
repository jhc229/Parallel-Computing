/* here we define block-size for reduction */
#define Treduction 256

/* here we define block-dimension for iterate */
#define Titerate 16
#pragma OPENCL EXTENSION cl_khr_fp64: enable

/* Use a 1D thread array to compute a partially reduced epsilon */
__kernel void oclReductionKernel(int L, __global double *c_Iold, __global double *c_Inew, __global double *c_partEpsilon){

  __local double s_Idiff[Treduction];

  int t = get_local_id(0); //threadIdx.x;
  int b = get_group_id(0); //blockIdx.x;
  int id = t + Treduction*b;

  s_Idiff[t] = 0;
  if(id<L)
    s_Idiff[t] = pow(c_Inew[id]-c_Iold[id], 2);

  /* tree based reduction of shared memory array to one entry per thread-block */
  int alive = Treduction/2;
  while(t<alive && alive>=1){

    barrier(CLK_LOCAL_MEM_FENCE);

    if(t+alive<Treduction)
      s_Idiff[t] += s_Idiff[t+alive];
    alive /=2;
  }
  
  /* one thread from thread-block writes out reduced single entry to partEpsilon */
  if(t==0)
    c_partEpsilon[b] = s_Idiff[0];
}

/* implement CUDA iterate kernel using a two dimensional array of threads */
__kernel void oclIterateKernel(int M, int N, __global double *c_Iold, __global double *c_Inew){
  
  /* compute i and j using CUDA thread indices, block indices, and block dimensions */
  /* Remember: use 1-indexing to match the for loop in the original iterate function */
  int i,j;
  i = 1 + get_global_id(0);
  j = 1 + get_global_id(1);

  /* each thread only updates one single entry of Inew using update formula */
  if(i<=N && j<=M){

    //int c_idx(int N, int i, int j)
    //int id = i + j*(N+2);
    c_Inew[i + j*(N+2)] 
      = 0.25*(c_Iold[(i+1) + j*(N+2)] + 
            c_Iold[(i-1) + j*(N+2)] +
	          c_Iold[i + (j+1)*(N+2)] +
		        c_Iold[i + (j-1)*(N+2)]);
  }
}


